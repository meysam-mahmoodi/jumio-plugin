"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nsjumioplugin_common_1 = require("./nsjumioplugin.common");
var Nsjumioplugin = (function (_super) {
    __extends(Nsjumioplugin, _super);
    function Nsjumioplugin() {
        return _super.call(this) || this;
    }
    Nsjumioplugin.prototype.start = function (merchantApiToken, merchantApiSecret, customerEmail, cancelWithError, finishInitWithError, finishedScan) {
        var _this = this;
        this.cancelWithError = cancelWithError;
        this.finishInitWithError = finishInitWithError;
        this.finishedScan = finishedScan;
        console.log("EEEEEEEEEEEE greet 7");
        var config = this.config;
        config = NetverifyConfiguration.new();
        config.merchantApiToken = merchantApiToken;
        config.merchantApiSecret = merchantApiSecret;
        this.delegate = NsjumiopluginDelegateImpl.createWithOwnerResultCallback(new WeakRef(this), this.rootVC(), function (netverifyViewController, documentData, scanReference) {
            _this.finishedScan(documentData);
        });
        config.delegate = this.delegate;
        config.customerId = customerEmail;
        try {
            this.netverifyViewController = NetverifyViewController.alloc().initWithConfiguration(config);
            this.rootVC().presentViewControllerAnimatedCompletion(this.netverifyViewController, false, function () {
                console.log('EEEEEEEEEEEE done');
            });
        }
        catch (e) {
            console.log('EEEEEEEEEEEE EXCEPTION HANDLED:', e);
        }
    };
    Nsjumioplugin.prototype.rootVC = function () {
        var appWindow = UIApplication.sharedApplication.keyWindow;
        return appWindow.rootViewController;
    };
    return Nsjumioplugin;
}(nsjumioplugin_common_1.Common));
exports.Nsjumioplugin = Nsjumioplugin;
var NsjumiopluginDelegateImpl = (function (_super) {
    __extends(NsjumiopluginDelegateImpl, _super);
    function NsjumiopluginDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NsjumiopluginDelegateImpl_1 = NsjumiopluginDelegateImpl;
    NsjumiopluginDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    NsjumiopluginDelegateImpl.createWithOwnerResultCallback = function (owner, vc, callback) {
        var delegate = NsjumiopluginDelegateImpl_1.new();
        delegate._owner = owner;
        delegate._callback = callback;
        delegate._vc = vc;
        return delegate;
    };
    NsjumiopluginDelegateImpl.prototype.netverifyViewControllerDidCancelWithErrorScanReference = function (netverifyViewController, error, scanReference) {
        console.log("EEEEEEEEEEE 1");
        this._vc.dismissViewControllerAnimatedCompletion(true, null);
        this._owner.get().netverifyViewController.destroy();
    };
    NsjumiopluginDelegateImpl.prototype.netverifyViewControllerDidFinishInitializingWithError = function (netverifyViewController, error) {
        console.log("EEEEEEEEEEE 2");
        if (error) {
            this._vc.dismissViewControllerAnimatedCompletion(true, null);
            this._owner.get().netverifyViewController.destroy();
        }
    };
    NsjumiopluginDelegateImpl.prototype.netverifyViewControllerDidFinishWithDocumentDataScanReference = function (netverifyViewController, documentData, scanReference) {
        console.log("EEEEEEEEEEE 3");
        console.log("finished successfully with scan reference: %@", scanReference);
        this._callback(netverifyViewController, documentData, scanReference);
        this._vc.dismissViewControllerAnimatedCompletion(true, null);
        this._owner.get().netverifyViewController.destroy();
    };
    NsjumiopluginDelegateImpl = NsjumiopluginDelegateImpl_1 = __decorate([
        ObjCClass(NetverifyViewControllerDelegate)
    ], NsjumiopluginDelegateImpl);
    return NsjumiopluginDelegateImpl;
    var NsjumiopluginDelegateImpl_1;
}(NSObject));
//# sourceMappingURL=data:application/json;base64,